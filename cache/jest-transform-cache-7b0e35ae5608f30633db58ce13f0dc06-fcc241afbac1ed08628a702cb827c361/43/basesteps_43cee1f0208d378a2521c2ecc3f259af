92bb5511be85555c1a30a7c9bfb678aa
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _testUtils = require("react-dom/test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
let screen;
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_Base.default, null)));
  });
  afterEach(() => {
    (0, _react.cleanup)();
  });
  test("Adding an item to the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeTruthy();
    });
    when('the user clicks the "Add to Cart" button for an item', () => {
      const itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      const addCart = screen.getByRole("button", {
        name: "add-to-cart"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(addCart);
      });
    });
    then("the total quantity should increase by 1", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("6");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Removing an item from the cart", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
    })))));
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9CYXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdDIiLCJfcmVhY3RSZWR1eCIsIl90b29sa2l0IiwiX3JlYWN0Um91dGVyRG9tIiwiX2NhcnRTbGljZSIsIl90ZXN0VXRpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsInN0b3JlIiwic2NyZWVuIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJiZWZvcmVFYWNoIiwiY29uZmlndXJlU3RvcmUiLCJyZWR1Y2VyIiwiY2FydCIsImNhcnRTbGljZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIml0ZW1RdWFudGl0eSIsImdldEJ5VGV4dCIsImFkZENhcnQiLCJnZXRCeVJvbGUiLCJuYW1lIiwiYWN0IiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ3YWl0Rm9yIiwiQnJvd3NlclJvdXRlciIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbImJhc2Uuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgY2xlYW51cCwgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgQmFzZSBmcm9tIFwiLi4vLi4vQmFzZVwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGVzLCBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBjYXJ0U2xpY2UgZnJvbSBcIi4uLy4uL3JlZHV4L3JlZHVjZXIvY2FydFNsaWNlXCI7XHJcbmltcG9ydCB7IGFjdCB9IGZyb20gXCJyZWFjdC1kb20vdGVzdC11dGlsc1wiO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9iYXNlLmZlYXR1cmVcIik7XHJcblxyXG5sZXQgc3RvcmU6IGFueTtcclxubGV0IHNjcmVlbjogYW55O1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBjYXJ0OiBjYXJ0U2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxCYXNlIC8+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgY2xlYW51cCgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiQWRkaW5nIGFuIGl0ZW0gdG8gdGhlIGNhcnRcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBjYXJ0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oJ3RoZSB1c2VyIGNsaWNrcyB0aGUgXCJBZGQgdG8gQ2FydFwiIGJ1dHRvbiBmb3IgYW4gaXRlbScsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgYWRkQ2FydCA9IHNjcmVlbi5nZXRCeVJvbGUoXCJidXR0b25cIiwgeyBuYW1lOiBcImFkZC10by1jYXJ0XCIgfSk7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGFkZENhcnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB0b3RhbCBxdWFudGl0eSBzaG91bGQgaW5jcmVhc2UgYnkgMVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1RdWFudGl0eSA9IHNjcmVlbi5nZXRCeVRleHQoXCI2XCIpO1xyXG4gICAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICB0ZXN0KFwiUmVtb3ZpbmcgYW4gaXRlbSBmcm9tIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBjYXJ0OiBjYXJ0U2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxCYXNlIC8+fSAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sZUFBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsVUFBQSxHQUFBTCxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQVMsVUFBQSxHQUFBVCxPQUFBO0FBQTJDLFNBQUFHLHVCQUFBTyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQzNDLE1BQU1HLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLHNDQUFzQyxDQUFDO0FBRW5FLElBQUlDLEtBQVU7QUFDZCxJQUFJQyxNQUFXO0FBRWYsSUFBQUMsMkJBQWEsRUFBQ0osT0FBTyxFQUFHSyxJQUFJLElBQUs7RUFDL0JDLFVBQVUsQ0FBQyxNQUFNO0lBQ2ZKLEtBQUssR0FBRyxJQUFBSyx1QkFBYyxFQUFDO01BQ3JCQyxPQUFPLEVBQUU7UUFDUEMsSUFBSSxFQUFFQztNQUNSO0lBQ0YsQ0FBQyxDQUFDO0lBRUZQLE1BQU0sR0FBRyxJQUFBUSxhQUFNLGdCQUNi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