8f23a72e3876371bb7a58b70cb8fb446
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _testUtils = require("react-dom/test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
let screen;
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeAll(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_Base.default, null)));
  });
  test("Adding an item to the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeTruthy();
    });
    when('the user clicks the "Add to Cart" button for an item', () => {
      const itemQuantity = screen.getAllByText("5");
      expect(itemQuantity[0]).toBeTruthy();
      const addCart = screen.getByRole("button", {
        name: "add-to-cart"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(addCart);
      });
    });
    then("the total quantity should increase by 1", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("6");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Removing an item from the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9CYXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdDIiLCJfcmVhY3RSZWR1eCIsIl90b29sa2l0IiwiX2NhcnRTbGljZSIsIl90ZXN0VXRpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsInN0b3JlIiwic2NyZWVuIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJiZWZvcmVBbGwiLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJjYXJ0IiwiY2FydFNsaWNlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsImFuZCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJpdGVtUXVhbnRpdHkiLCJnZXRBbGxCeVRleHQiLCJhZGRDYXJ0IiwiZ2V0QnlSb2xlIiwibmFtZSIsImFjdCIsImZpcmVFdmVudCIsImNsaWNrIiwid2FpdEZvciIsImdldEJ5VGV4dCIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBjbGVhbnVwLCBmaXJlRXZlbnQsIHJlbmRlciwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBCYXNlIGZyb20gXCIuLi8uLi9CYXNlXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwidGV4dC1lbmNvZGluZ1wiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZXMsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IGNhcnRTbGljZSBmcm9tIFwiLi4vLi4vcmVkdXgvcmVkdWNlci9jYXJ0U2xpY2VcIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZVwiKTtcclxuXHJcbmxldCBzdG9yZTogYW55O1xyXG5sZXQgc2NyZWVuOiBhbnk7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgYmVmb3JlQWxsKCgpID0+IHtcclxuICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgY2FydDogY2FydFNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxCYXNlIC8+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiQWRkaW5nIGFuIGl0ZW0gdG8gdGhlIGNhcnRcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBjYXJ0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oJ3RoZSB1c2VyIGNsaWNrcyB0aGUgXCJBZGQgdG8gQ2FydFwiIGJ1dHRvbiBmb3IgYW4gaXRlbScsICgpID0+IHtcclxuICAgICAgY29uc3QgaXRlbVF1YW50aXR5ID0gc2NyZWVuLmdldEFsbEJ5VGV4dChcIjVcIik7XHJcbiAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHlbMF0pLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgYWRkQ2FydCA9IHNjcmVlbi5nZXRCeVJvbGUoXCJidXR0b25cIiwgeyBuYW1lOiBcImFkZC10by1jYXJ0XCIgfSk7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGFkZENhcnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB0b3RhbCBxdWFudGl0eSBzaG91bGQgaW5jcmVhc2UgYnkgMVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1RdWFudGl0eSA9IHNjcmVlbi5nZXRCeVRleHQoXCI2XCIpO1xyXG4gICAgICAgIGV4cGVjdChpdGVtUXVhbnRpdHkpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICB0ZXN0KFwiUmVtb3ZpbmcgYW4gaXRlbSBmcm9tIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sVUFBQSxHQUFB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