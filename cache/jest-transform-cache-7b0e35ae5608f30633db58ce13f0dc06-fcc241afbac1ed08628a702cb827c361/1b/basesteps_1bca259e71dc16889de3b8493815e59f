514b21e96e3a49eb1dcd670d6ec6f8c8
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
var _testUtils = require("react-dom/test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
let screen;
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_Base.default, null)));
  });
  test("Adding a new item to the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeTruthy();
    });
    when('the user clicks the "Add New Item" button', () => {
      const itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      const addCart = screen.getByRole("button", {
        name: "add-to-cart"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(addCart);
      });
    });
    then("a new item should be added to the cart", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("6");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Deleting an item from the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Delete" button for an item', async () => {
      const itemQuantity = screen.getByText("5");
      expect(itemQuantity).toBeTruthy();
      const removeCart = screen.getAllByRole("button", {
        name: "remove-cart-button"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(removeCart[4]);
      });
    });
    then("the total quantity should decrease by the quantity of the deleted item", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("4");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Removing an item from the cart", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove" button for an item', async () => {
      const totalItemQuantity = screen.getByText("5");
      const itemQuantity = screen.getAllByText("1");
      expect(totalItemQuantity).toBeTruthy();
      const decreaseQuantity = screen.getAllByRole("button", {
        name: "decrease-item-quantity"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(decreaseQuantity[4]);
      });
    });
    then("the total quantity should decrease by 1", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("Zero");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Adding an item to the cart", ({
    given,
    when,
    then
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Add to Cart" button for an item', async () => {
      const totalItemQuantity = screen.getByText("5");
      const itemQuantity = screen.getAllByText("1");
      expect(totalItemQuantity).toBeTruthy();
      expect(itemQuantity[0]).toBeTruthy();
      const increaseQuantity = screen.getAllByRole("button", {
        name: "increase-item-quantity"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(increaseQuantity[0]);
      });
    });
    then("the total quantity should increase by 1", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getByText("2");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Resetting the cart counter", ({
    given,
    when,
    then
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Reset Counter" button', async () => {
      const totalItemQuantity = screen.getByText("5");
      const itemQuantity = screen.getAllByText("1");
      expect(totalItemQuantity).toBeTruthy();
      expect(itemQuantity[0]).toBeTruthy();
      const resetQuantity = screen.getByRole("button", {
        name: "reset-button"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(resetQuantity);
      });
    });
    then("the total quantity should be set to 0", async () => {
      await (0, _react.waitFor)(() => {
        const itemQuantity = screen.getAllByText("0");
        expect(itemQuantity).toBeTruthy();
      });
    });
  });
  test("Removing all items from the cart", ({
    given,
    when,
    then
  }) => {
    given("the user is on the cart page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks the "Remove All Items" button', async () => {
      const totalItemQuantity = screen.getByText("5");
      const itemQuantity = screen.getAllByText("1");
      expect(totalItemQuantity).toBeTruthy();
      expect(itemQuantity[0]).toBeTruthy();
      const removeAllButton = screen.getByRole("button", {
        name: "remove-all-button"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(removeAllButton);
      });
    });
    then("the cart should be empty", async () => {
      await (0, _react.waitFor)(() => {
        try {
          screen.getByTestId("items-container");
          expect(true).toBeFalsy();
        } catch (error) {
          expect(error).toBeDefined();
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,