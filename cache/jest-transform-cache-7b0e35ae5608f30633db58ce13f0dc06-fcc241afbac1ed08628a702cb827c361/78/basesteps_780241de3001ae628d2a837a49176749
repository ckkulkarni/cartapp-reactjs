d254372024ffc1b284f4b8a846420c77
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
var _cartSlice = _interopRequireDefault(require("../../redux/reducer/cartSlice"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Adding an item to the cart", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        cart: _cartSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
    })))));
    given("the user is on the cart page", () => {
      expect(screen).toBeTruthy();
    });
    when('the user clicks the "Add to Cart" button for an item', () => {
      const addCart = screen.getByRole("button", {
        name: "add-to-cart"
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9CYXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdDIiLCJfcmVhY3RSZWR1eCIsIl90b29sa2l0IiwiX3JlYWN0Um91dGVyRG9tIiwiX2NhcnRTbGljZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwic3RvcmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJjYXJ0IiwiY2FydFNsaWNlIiwic2NyZWVuIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiQnJvd3NlclJvdXRlciIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiYWRkQ2FydCIsImdldEJ5Um9sZSIsIm5hbWUiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IEJhc2UgZnJvbSBcIi4uLy4uL0Jhc2VcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlcywgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgY2FydFNsaWNlIGZyb20gXCIuLi8uLi9yZWR1eC9yZWR1Y2VyL2NhcnRTbGljZVwiO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9iYXNlLmZlYXR1cmVcIik7XHJcbmxldCBzdG9yZTogYW55O1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIkFkZGluZyBhbiBpdGVtIHRvIHRoZSBjYXJ0XCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBjYXJ0OiBjYXJ0U2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxCYXNlIC8+fSAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgY2FydCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgdXNlciBjbGlja3MgdGhlIFwiQWRkIHRvIENhcnRcIiBidXR0b24gZm9yIGFuIGl0ZW0nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFkZENhcnQgPSBzY3JlZW4uZ2V0QnlSb2xlKFwiYnV0dG9uXCIsIHsgbmFtZTogXCJhZGQtdG8tY2FydFwiIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsYUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxRQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxlQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxVQUFBLEdBQUFMLHNCQUFBLENBQUFILE9BQUE7QUFBc0QsU0FBQUcsdUJBQUFNLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFDdEQsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsc0NBQXNDLENBQUM7QUFDbkUsSUFBSUMsS0FBVTtBQUNkLElBQUFDLDJCQUFhLEVBQUNILE9BQU8sRUFBR0ksSUFBSSxJQUFLO0VBQy9CQSxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztJQUFFQyxLQUFLO0lBQUVDLElBQUk7SUFBRUMsSUFBSTtJQUFFQztFQUFJLENBQUMsS0FBSztJQUNqRU4sS0FBSyxHQUFHLElBQUFPLHVCQUFjLEVBQUM7TUFDckJDLE9BQU8sRUFBRTtRQUNQQyxJQUFJLEVBQUVDO01BQ1I7SUFDRixDQUFDLENBQUM7SUFDRixNQUFNQyxNQUFNLEdBQUcsSUFBQUMsYUFBTSxnQkFDbkJ0QixPQUFBLENBQUFPLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3RCLFdBQUEsQ0FBQXVCLFFBQVE7TUFBQ2QsS0FBSyxFQUFFQTtJQUFNLGdCQUNyQlYsT0FBQSxDQUFBTyxPQUFBLENBQUFnQixhQUFBLENBQUNwQixlQUFBLENBQUFzQixhQUFNLHFCQUNMekIsT0FBQSxDQUFBTyxPQUFBLENBQUFnQixhQUFBLENBQUNwQixlQUFBLENBQUF1QixNQUFNLHFCQUNMMUIsT0FBQSxDQUFBTyxPQUFBLENBQUFnQixhQUFBLENBQUNwQixlQUFBLENBQUF3QixLQUFLO01BQUNDLElBQUksRUFBQyxHQUFHO01BQUNDLE9BQU8sZUFBRTdCLE9BQUEsQ0FBQU8sT0FBQSxDQUFBZ0IsYUFBQSxDQUFDekIsS0FBQSxDQUFBUyxPQUFJO0lBQUksRUFBRyxDQUM5QixDQUNGLENBQ0EsQ0FDWjtJQUNETSxLQUFLLENBQUMsOEJBQThCLEVBQUUsTUFBTTtNQUMxQ2lCLE1BQU0sQ0FBQ1QsTUFBTSxDQUFDLENBQUNVLFVBQVUsRUFBRTtJQUM3QixDQUFDLENBQUM7SUFDRmpCLElBQUksQ0FBQyxzREFBc0QsRUFBRSxNQUFNO01BQ2pFLE1BQU1rQixPQUFPLEdBQUdYLE1BQU0sQ0FBQ1ksU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUFFQyxJQUFJLEVBQUU7TUFBYyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=