6d4e8c0e5b712a35b2d485c7437be71e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetCounter = exports.removeItem = exports.removeAllItems = exports.increaseQuantity = exports.deleteItem = exports.default = exports.decreaseQuantity = exports.addNewItem = exports.addItem = void 0;
var _toolkit = require("@reduxjs/toolkit");
const initialItems = [{
  id: 1,
  quantity: 1
}, {
  id: 2,
  quantity: 1
}, {
  id: 3,
  quantity: 1
}, {
  id: 4,
  quantity: 1
}, {
  id: 5,
  quantity: 1
}];
const calculateTotalQuantity = items => {
  return items.reduce((total, item) => total + item.quantity, 0);
};
const initialState = {
  items: initialItems,
  totalQuantity: calculateTotalQuantity(initialItems)
};
const cartSlice = (0, _toolkit.createSlice)({
  name: 'cart',
  initialState,
  reducers: {
    addItem: (state, action) => {
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (existingItem) {
        existingItem.quantity++;
        state.totalQuantity++;
      } else {
        state.items.push({
          ...action.payload,
          quantity: 1
        });
        state.totalQuantity++;
      }
    },
    addNewItem: state => {
      const uniqueIndex = state.items.reduce((maxIndex, item) => Math.max(maxIndex, item.id), 0) + 1;
      state.items.push({
        id: uniqueIndex,
        quantity: 1
      });
      state.totalQuantity++;
    },
    removeItem: (state, action) => {
      const item = state.items.find(item => item.id === action.payload);
      if (item && item.quantity > 0) {
        item.quantity--;
        state.totalQuantity--;
      }
    },
    increaseQuantity: (state, action) => {
      const item = state.items.find(item => item.id === action.payload);
      if (item) {
        item.quantity++;
        state.totalQuantity++;
      }
    },
    decreaseQuantity: (state, action) => {
      const item = state.items.find(item => item.id === action.payload);
      if (item && item.quantity > 0) {
        item.quantity--;
        state.totalQuantity--;
      }
    },
    resetCounter: state => {
      state.items.forEach(item => {
        state.totalQuantity -= item.quantity;
        item.quantity = 0;
      });
    },
    removeAllItems: state => {
      state.totalQuantity = 0;
      state.items = [];
    },
    deleteItem: (state, action) => {
      const deletedItem = state.items.find(item => item.id === action.payload);
      if (deletedItem) {
        state.totalQuantity -= deletedItem.quantity;
        state.items = state.items.filter(item => item.id !== action.payload);
      }
    }
  }
});
const {
  addItem,
  removeItem,
  increaseQuantity,
  decreaseQuantity,
  resetCounter,
  removeAllItems,
  deleteItem,
  addNewItem
} = cartSlice.actions;
exports.addNewItem = addNewItem;
exports.deleteItem = deleteItem;
exports.removeAllItems = removeAllItems;
exports.resetCounter = resetCounter;
exports.decreaseQuantity = decreaseQuantity;
exports.increaseQuantity = increaseQuantity;
exports.removeItem = removeItem;
exports.addItem = addItem;
var _default = cartSlice.reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,